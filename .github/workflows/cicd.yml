name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main

defaults:
   run: { shell: bash }

jobs:

  ci:
    name: CI - Build and Test App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: 'app/package-lock.json'
      - name: Install dependencies
        working-directory: ./app
        run: npm install
      
      - name: Compile TypeScript
        working-directory: ./app
        run: npm run build

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: ci
    outputs:
      ecr-repository-url: ${{ steps.get-repo-url.outputs.ecr-repository-url }}
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ vars.AWS_REGION }}
        ECR_REPOSITORY_NAME: ${{ vars.ECR_REPOSITORY_NAME }}
        ECR_IMAGE_TAG: ${{ vars.ECR_IMAGE_TAG }}
        ECR_IMAGE_TAG_MUTABILITY: ${{ vars.ECR_IMAGE_TAG_MUTABILITY }}
        ECR_SCAN_ON_PUSH: ${{ vars.ECR_SCAN_ON_PUSH }}
        ECS_CONTAINER_PORT: ${{ vars.ECS_CONTAINER_PORT }}
        TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: npm
          cache-dependency-path: iac/package-lock.json
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
      - name: Install cdktf cli
        run: npm install -g cdktf-cli   
      - name: Install CDKTF dependencies
        working-directory: ./iac
        run: npm install      
      - name: Get providers
        working-directory: ./iac
        run: npm run get
      - name: Synthesize CDKTF
        working-directory: ./iac
        run: npm run synth
      - name: Deploy infrastructure
        id: deploy
        working-directory: ./iac
        run: npm run deploy -- --auto-approve
      - name: Get ECR Repo URL
        id: get-repo-url
        working-directory: ./iac
        run: |
          npx cdktf outputs --skip-synth --outputs-file temp-values.json
          ECR_URL=$(yq '.ecr-app-instance.ecr-repository-url' temp-values.json | tr -d '"')
          echo "ECR Repository URL: $ECR_URL"
          echo "ecr-repository-url=$ECR_URL" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Docker Image to ECR repository
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build Docker image
        working-directory: ./app
        run: >
          docker build 
          --platform linux/amd64
          -t tv-app-image .
      
      - name: Tag and push Docker image to ECR
        run: |
          ECR_URL="${{ needs.deploy-infrastructure.outputs.ecr-repository-url }}"
          
          # Tag the image with the ECR repository URL
          docker tag tv-app-image $ECR_URL:${{ vars.ECR_IMAGE_TAG }}
          docker push $ECR_URL:${{ vars.ECR_IMAGE_TAG }}

#   # Job 4: Update ECS service with new image (optional - triggers deployment)
#   update-service:
#     name: Update ECS Service
#     runs-on: ubuntu-latest
#     needs: [deploy-infrastructure, build-and-push]
    
#     steps:
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      
#       - name: Force ECS service update
#         run: |
#           # Get the service name from environment or use default
#           SERVICE_NAME="${{ secrets.ECR_REPOSITORY_NAME }}-service"
#           CLUSTER_NAME="${{ secrets.ECR_REPOSITORY_NAME }}-cluster"
          
#           echo "Forcing ECS service update for $SERVICE_NAME in cluster $CLUSTER_NAME"
          
#           # Force new deployment to pick up the latest image
#           aws ecs update-service \
#             --cluster $CLUSTER_NAME \
#             --service $SERVICE_NAME \
#             --force-new-deployment \
#             --region ${{ vars.AWS_DEFAULT_REGION }}
          
#           echo "ECS service update initiated successfully"
